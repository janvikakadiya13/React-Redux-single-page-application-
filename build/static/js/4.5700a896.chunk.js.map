{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","shared/shared.js","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["input","props","inputElement","invalidArray","Classes","InputElement","invalid","shouldValidate","touched","push","InputInvalid","elementType","className","join","elementConfig","onChange","changed","value","options","map","option","key","displayValue","Input","Label","label","module","exports","checkValidity","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","isNumeric","Auth","state","controls","email","type","placeholder","validation","valid","password","isSignup","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","id","config","form","formElement","loading","errorMsg","error","message","authRedirect","isAuthenticated","to","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"kHAAA,sCAkDeA,IA/CF,SAACC,GAEV,IAAIC,EAAa,KACXC,EAAa,CAACC,IAAQC,cAI5B,OAHGJ,EAAMK,SAAWL,EAAMM,gBAAkBN,EAAMO,SAC9CL,EAAaM,KAAKL,IAAQM,cAEvBT,EAAMU,aACT,IAAM,QACFT,EAAa,yCAAOU,UAAWT,EAAaU,KAAK,MACzCZ,EAAMa,cADD,CAETC,SAAUd,EAAMe,QAChBC,MAAOhB,EAAMgB,SAEjB,MACJ,IAAM,WACFf,EAAa,4CAAUU,UAAWT,EAAaU,KAAK,MAC5CZ,EAAMa,cADD,CAETC,SAAUd,EAAMe,QAChBC,MAAOhB,EAAMgB,SAEjB,MACH,IAAM,SACFf,EAAc,4BAAQU,UAAWT,EAAaU,KAAK,KAChDE,SAAUd,EAAMe,QAChBC,MAAOhB,EAAMgB,OACPhB,EAAMa,cAAcI,QAAQC,KAAI,SAAAC,GAAM,OACvC,4BAAQC,IAAKD,EAAOH,MAAOA,MAAOG,EAAOH,OAAQG,EAAOE,kBAGhE,MAEL,QACIpB,EAAa,2BAAOU,UAAWT,EAAaU,KAAK,KAC7CE,SAAUd,EAAMe,QAChBC,MAAOhB,EAAMgB,QAIzB,OACI,yBAAKL,UAAWR,IAAQmB,OACpB,2BAAOX,UAAWR,IAAQoB,OAAQvB,EAAMwB,OACvCvB,K,oBC5CbwB,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,aAAe,4BAA4B,aAAe,8B,iCCDtI,kCAAO,IAAOC,EAAgB,SAACX,EAAMY,GAC7B,IAAIC,GAAU,EACd,IAAKD,EACD,OAAO,EAeX,GAZIA,EAAME,WACND,EAA2B,KAAjBb,EAAMe,QAAiBF,GAGjCD,EAAMI,YACNH,EAAUb,EAAMiB,QAAUL,EAAMI,WAAaH,GAG7CD,EAAMM,YACNL,EAAUb,EAAMiB,QAAUL,EAAMM,WAAaL,GAG7CD,EAAMO,QAAS,CAEfN,EADgB,wIACEO,KAAKpB,IAAUa,EAGrC,GAAID,EAAMS,UAAW,CAEjBR,EADgB,QACEO,KAAKpB,IAAUa,EAGrC,OAAOA,I,oBC3BfJ,EAAOC,QAAU,CAAC,KAAO,qB,kLCSnBY,E,4MACFC,MAAQ,CACJC,SAAU,CACNC,MAAO,CACH/B,YAAa,QACbG,cAAe,CACX6B,KAAM,QACNC,YAAa,gBAEjB3B,MAAO,GACP4B,WAAY,CACRd,UAAU,EACVK,SAAS,GAEbU,OAAO,EACPtC,SAAS,GAEbuC,SAAU,CACNpC,YAAa,QACbG,cAAe,CACX6B,KAAM,WACNC,YAAa,YAEjB3B,MAAO,GACP4B,WAAY,CACRd,UAAU,EACVE,UAAW,GAEfa,OAAO,EACPtC,SAAS,IAGjBwC,UAAS,G,EAWbC,oBAAsB,SAACC,EAAOC,GAC1B,IAAMC,EAAe,2BACd,EAAKZ,MAAMC,UADG,kBAEhBU,EAFgB,2BAGV,EAAKX,MAAMC,SAASU,IAHV,IAIblC,MAAOiC,EAAMG,OAAOpC,MACpB6B,MAAOlB,YAAcsB,EAAMG,OAAOpC,MAAO,EAAKuB,MAAMC,SAASU,GAAaN,YAC1ErC,SAAS,MAGjB,EAAK8C,SAAS,CAACb,SAAUW,K,EAG7BG,cAAgB,SAACL,GACbA,EAAMM,iBACN,EAAKvD,MAAMwD,OAAO,EAAKjB,MAAMC,SAASC,MAAMzB,MAAO,EAAKuB,MAAMC,SAASM,SAAS9B,MAAM,EAAKuB,MAAMQ,W,EAGrGU,sBAAwB,WACpB,EAAKJ,UAAS,SAACK,GACX,MAAQ,CAACX,UAAUW,EAAUX,c,kEA3B7BY,KAAK3D,MAAM4D,gBAAkD,MAAhCD,KAAK3D,MAAM6D,kBACxCF,KAAK3D,MAAM8D,0B,+BA8BV,IAAD,OACEC,EAAoB,GAC1B,IAAM,IAAI3C,KAAOuC,KAAKpB,MAAMC,SACxBuB,EAAkBvD,KAAM,CACpBwD,GAAI5C,EACJ6C,OAAQN,KAAKpB,MAAMC,SAASpB,KAIpC,IAAI8C,EAAOH,EAAkB7C,KAAK,SAAAiD,GAAW,OACzC,kBAAC,IAAD,CACI/C,IAAK+C,EAAYH,GACjBtD,YAAayD,EAAYF,OAAOvD,YAChCG,cAAesD,EAAYF,OAAOpD,cAClCG,MAAOmD,EAAYF,OAAOjD,MAC1BX,SAAU8D,EAAYF,OAAOpB,MAC7BvC,eAAgB6D,EAAYF,OAAOrB,WACnCrC,QAAS4D,EAAYF,OAAO1D,QAC5BQ,QAAS,SAAEkC,GAAF,OAAa,EAAKD,oBAAqBC,EAAOkB,EAAYH,UAIxEL,KAAK3D,MAAMoE,UACVF,EAAK,kBAAC,IAAD,OAGT,IAAIG,EAAW,KACZV,KAAK3D,MAAMsE,QACVD,EACI,2BAAIV,KAAK3D,MAAMsE,MAAMC,UAE7B,IAAIC,EAAa,KAKjB,OAJGb,KAAK3D,MAAMyE,kBACVD,EAAa,kBAAC,IAAD,CAAUE,GAAIf,KAAK3D,MAAM6D,oBAItC,yBAAKlD,UAAWgE,IAAQrC,MACnB+B,EACAG,EACD,0BAAMI,SAAUjB,KAAKL,eAChBY,EACD,kBAAC,IAAD,CAAQW,QAAQ,WAAhB,WAEJ,kBAAC,IAAD,CACKC,QAASnB,KAAKF,sBACdoB,QAAQ,UAFb,aAEiClB,KAAKpB,MAAMQ,SAAS,UAAU,gB,GAjH5DgC,aAuIJC,uBAhBQ,SAAAzC,GACnB,MAAO,CACH6B,QAAQ7B,EAAM0C,KAAKb,QACnBE,MAAM/B,EAAM0C,KAAKX,MACjBG,gBAAgBlC,EAAM0C,KAAKC,MAC3BtB,eAAerB,EAAM4C,cAAcC,SACnCvB,iBAAiBtB,EAAM0C,KAAKpB,qBAGT,SAAAwB,GACvB,MAAO,CACH7B,OAAQ,SAACf,EAAOK,EAASC,GAAjB,OAA8BsC,EAASC,IAAa7C,EAAOK,EAASC,KAC5Ee,sBAAsB,kBAAIuB,EAASC,IAA4B,UAIxDN,CAA6C1C","file":"static/js/4.5700a896.chunk.js","sourcesContent":["import React from 'react';\r\nimport Classes from './Input.module.css';\r\n\r\nconst input =(props)=>{\r\n    \r\n    let inputElement=null;\r\n    const invalidArray=[Classes.InputElement];\r\n    if(props.invalid && props.shouldValidate && props.touched ){\r\n        invalidArray.push(Classes.InputInvalid)\r\n    }\r\n    switch(props.elementType){\r\n        case ('input') :\r\n            inputElement=<input className={invalidArray.join(\" \")} \r\n                {...props.elementConfig} \r\n                onChange={props.changed}\r\n                value={props.value}\r\n             />\r\n            break;\r\n        case ('textarea') :\r\n            inputElement=<textarea className={invalidArray.join(\" \")} \r\n                {...props.elementConfig} \r\n                onChange={props.changed}\r\n                value={props.value}\r\n                />\r\n            break; \r\n         case ('select') :\r\n             inputElement=(<select className={invalidArray.join(\" \")} \r\n                onChange={props.changed}\r\n                value={props.value} >\r\n                     {props.elementConfig.options.map(option=>\r\n                     <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                     )}\r\n                </select>)\r\n             break; \r\n\r\n        default:\r\n            inputElement=<input className={invalidArray.join(\" \")}\r\n                onChange={props.changed}\r\n                value={props.value}\r\n            />       \r\n    }\r\n\r\n    return(\r\n        <div className={Classes.Input}>\r\n            <label className={Classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1eRwx\",\"Label\":\"Input_Label__37Rc-\",\"InputElement\":\"Input_InputElement__1MX9a\",\"InputInvalid\":\"Input_InputInvalid__1ZnBu\"};","export const  checkValidity = (value,rules)=>{\r\n        let isValid = true;\r\n        if (!rules) {\r\n            return true;\r\n        }\r\n        \r\n        if (rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if (rules.minLength) {\r\n            isValid = value.length >= rules.minLength && isValid\r\n        }\r\n\r\n        if (rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength && isValid\r\n        }\r\n\r\n        if (rules.isEmail) {\r\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        if (rules.isNumeric) {\r\n            const pattern = /^\\d+$/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3Xbns\"};","import React,{Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport {checkValidity} from '../../shared/shared';\r\n\r\nclass Auth extends Component{\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup:true\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\r\n            this.props.onSetAuthRedirectPath();\r\n        };\r\n        \r\n    };\r\n\r\n    \r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            }\r\n        };\r\n        this.setState({controls: updatedControls});\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value,this.state.isSignup);\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState((prevState)=>{\r\n            return  {isSignup:!prevState.isSignup}\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const formElementsArray = [];\r\n        for ( let key in this.state.controls ) {\r\n            formElementsArray.push( {\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            } );\r\n        }\r\n\r\n        let form = formElementsArray.map( formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={( event ) => this.inputChangedHandler( event, formElement.id )}/>\r\n                ) );\r\n\r\n       \r\n        if(this.props.loading){\r\n            form=<Spinner/>\r\n        }\r\n\r\n        let errorMsg = null;\r\n        if(this.props.error){\r\n            errorMsg=(\r\n                <p>{this.props.error.message}</p>);\r\n        }\r\n        let authRedirect=null \r\n        if(this.props.isAuthenticated){\r\n            authRedirect=<Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return(\r\n            <div className={classes.Auth}>\r\n                {errorMsg}\r\n                {authRedirect}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button\r\n                     clicked={this.switchAuthModeHandler}\r\n                     btnType=\"Danger\">SWITCH TO {this.state.isSignup?'SIGN IN':'SIGN UP'}</Button>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps= state =>{\r\n    return {\r\n        loading:state.auth.loading,\r\n        error:state.auth.error,\r\n        isAuthenticated:state.auth.token,\r\n        buildingBurger:state.burgerBuilder.building,\r\n        authRedirectPath:state.auth.authRedirectPath\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password,isSignup) => dispatch(actions.auth(email, password,isSignup)),\r\n        onSetAuthRedirectPath:()=>dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}