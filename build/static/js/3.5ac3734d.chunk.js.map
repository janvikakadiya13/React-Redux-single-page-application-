{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","shared/shared.js","components/Burger/checkoutSummary/checkoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Burger/checkoutSummary/checkoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["input","props","inputElement","invalidArray","Classes","InputElement","invalid","shouldValidate","touched","push","InputInvalid","elementType","className","join","elementConfig","onChange","changed","value","options","map","option","key","displayValue","Input","Label","label","module","exports","checkValidity","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","isNumeric","checkoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","type","placeholder","validation","valid","street","city","country","email","delivarymethod","formIsValid","orderHandler","event","preventDefault","console","log","ings","formData","formElementIdentifier","order","price","price_","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","setState","formElementsArray","this","id","config","form","onSubmit","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component"],"mappings":"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","file":"static/js/3.5ac3734d.chunk.js","sourcesContent":["import React from 'react';\r\nimport Classes from './Input.module.css';\r\n\r\nconst input =(props)=>{\r\n    \r\n    let inputElement=null;\r\n    const invalidArray=[Classes.InputElement];\r\n    if(props.invalid && props.shouldValidate && props.touched ){\r\n        invalidArray.push(Classes.InputInvalid)\r\n    }\r\n    switch(props.elementType){\r\n        case ('input') :\r\n            inputElement=<input className={invalidArray.join(\" \")} \r\n                {...props.elementConfig} \r\n                onChange={props.changed}\r\n                value={props.value}\r\n             />\r\n            break;\r\n        case ('textarea') :\r\n            inputElement=<textarea className={invalidArray.join(\" \")} \r\n                {...props.elementConfig} \r\n                onChange={props.changed}\r\n                value={props.value}\r\n                />\r\n            break; \r\n         case ('select') :\r\n             inputElement=(<select className={invalidArray.join(\" \")} \r\n                onChange={props.changed}\r\n                value={props.value} >\r\n                     {props.elementConfig.options.map(option=>\r\n                     <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                     )}\r\n                </select>)\r\n             break; \r\n\r\n        default:\r\n            inputElement=<input className={invalidArray.join(\" \")}\r\n                onChange={props.changed}\r\n                value={props.value}\r\n            />       \r\n    }\r\n\r\n    return(\r\n        <div className={Classes.Input}>\r\n            <label className={Classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1eRwx\",\"Label\":\"Input_Label__37Rc-\",\"InputElement\":\"Input_InputElement__1MX9a\",\"InputInvalid\":\"Input_InputInvalid__1ZnBu\"};","export const  checkValidity = (value,rules)=>{\r\n        let isValid = true;\r\n        if (!rules) {\r\n            return true;\r\n        }\r\n        \r\n        if (rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if (rules.minLength) {\r\n            isValid = value.length >= rules.minLength && isValid\r\n        }\r\n\r\n        if (rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength && isValid\r\n        }\r\n\r\n        if (rules.isEmail) {\r\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        if (rules.isNumeric) {\r\n            const pattern = /^\\d+$/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkoutSummary\":\"checkoutSummary_checkoutSummary__2s8ly\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2uYR_\"};","import React from 'react';\r\nimport Burger from '../Burger';\r\nimport Classes from './checkoutSummary.module.css';\r\nimport Button from '../../UI/Button/Button';\r\n\r\nconst checkoutSummary = (props)=>{\r\n    return(\r\n        <div className={Classes.checkoutSummary}>\r\n            <h1>WE HOPE YOU LOVE IT :) :)</h1>\r\n            <div style={{width:'100%',margin:'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button btnType=\"Success\" clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default checkoutSummary;","import React,{Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Classes from './ContactData.module.css';\r\nimport axios from '../../../axios-order';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport {checkValidity} from '../../../shared/shared'\r\n\r\nclass ContactData extends Component{\r\n    state={\r\n        orderForm:{\r\n                name:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Enter your name'\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true,\r\n                        minLength:2,\r\n                        maxLength:15\r\n                    },\r\n                    valid:false,\r\n                    touched:false\r\n                },\r\n                street:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Enter your street'\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true\r\n                    },\r\n                    valid:false,\r\n                    touched:false\r\n                },\r\n                city:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Enter your city'\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true\r\n                    },\r\n                    valid:false,\r\n                    touched:false\r\n                },\r\n                country:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Enter your country'\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true\r\n                    },\r\n                    valid:false,\r\n                    touched:false\r\n                },\r\n                email:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'email',\r\n                        placeholder:'Enter your mail'\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true,\r\n                        isEmail: true\r\n                    },\r\n                    valid:false,\r\n                    touched:false\r\n                },\r\n                delivarymethod:{\r\n                    elementType:'select',\r\n                    elementConfig:{\r\n                        options:[\r\n                            {value:'fastest',displayValue:'fastest'},\r\n                            {value:'cheapest',displayValue:'cheapest'}                            \r\n                        ]\r\n                    },\r\n                    value:'fastest',\r\n                    validation:{},\r\n                    valid:true\r\n                } \r\n            },\r\n            formIsValid:false,\r\n           \r\n        }\r\n    \r\n   \r\n    orderHandler=(event)=>{\r\n        event.preventDefault();\r\n        console.log(this.props.ings);\r\n    \r\n        const formData={};\r\n        for(let formElementIdentifier in this.state.orderForm ){\r\n            formData[formElementIdentifier]=this.state.orderForm[formElementIdentifier].value\r\n        }\r\n        const order = {\r\n            ingredients:this.props.ings,\r\n            price:this.props.price_ ,\r\n            orderData:formData,\r\n            userId:this.props.userId\r\n        }\r\n\r\n        this.props.onOrderBurger(order,this.props.token);\r\n     \r\n    }\r\n    \r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        const updatedOrderForm = {\r\n            ...this.state.orderForm\r\n        };\r\n        const updatedFormElement = { \r\n            ...updatedOrderForm[inputIdentifier]\r\n        };\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.valid =checkValidity(updatedFormElement.value,updatedFormElement.validation);\r\n        updatedFormElement.touched=true;\r\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\r\n         \r\n    }\r\n       \r\n\r\n\r\n    render(){\r\n       const formElementsArray=[]\r\n        for(let key in this.state.orderForm){\r\n            formElementsArray.push(\r\n                {id:key,\r\n                config:this.state.orderForm[key]}\r\n            )}\r\n\r\n        let form=(\r\n            <form onSubmit={this.orderHandler}>\r\n            {formElementsArray.map(formElement=>(\r\n                <Input key={formElement.id}\r\n                       elementType={formElement.config.elementType}\r\n                       elementConfig={formElement.config.elementConfig}\r\n                       value={formElement.value}\r\n                       changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                       invalid={!formElement.config.valid}\r\n                       shouldValidate={formElement.config.validation}\r\n                       touched={formElement.config.touched}\r\n                       \r\n                />\r\n            ))}\r\n            <Button disabled={!this.state.formIsValid} btnType=\"Success\" clicked={this.orderHandler}>ORDER</Button>\r\n        </form>\r\n        );\r\n\r\n        if(this.props.loading){\r\n            form=<Spinner/>\r\n        }\r\n\r\n        return(\r\n            <div className={Classes.ContactData}>\r\n                 <h4>Enter your contact data!</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps=state=>{\r\n    return {\r\n        ings:state.burgerBuilder.ingredients,\r\n        price_:state.burgerBuilder.totalPrice,\r\n        loading:state.order.loading,\r\n        token:state.auth.token,\r\n        userId:state.auth.userId\r\n     }\r\n }\r\n\r\n const mapDispatchToProps=dispatch=>{\r\n     return {\r\n         onOrderBurger : (orderData,token)=> dispatch(actions.purchaseBurger(orderData,token))\r\n     }\r\n }\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios));","import React, { Component } from 'react';\r\nimport {Route,Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport CheckoutSummary from '../../components/Burger/checkoutSummary/checkoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\n\r\n\r\nclass Checkout extends Component{\r\n\r\n    \r\n    checkoutCancelledHandler=()=>{\r\n        this.props.history.goBack();\r\n    } \r\n\r\n    checkoutContinuedHandler=()=>{\r\n       \r\n           this.props.history.replace('/checkout/contact-data')\r\n    }\r\n    render(){\r\n        \r\n        let summary= <Redirect to=\"/\" />\r\n    \r\n        if(this.props.ings){\r\n        \r\n         const purchasedRedirect=this.props.purchased ? <Redirect to=\"/\" /> : null\r\n         summary=(<div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary ingredients={this.props.ings}\r\n                    checkoutCancelled={this.checkoutCancelledHandler}\r\n                    checkoutContinued={this.checkoutContinuedHandler}/>\r\n                     <Route path={this.props.match.path + '/contact-data'}\r\n                             component={ContactData}/>\r\n                 </div>)\r\n\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps=state=>{\r\n    return {\r\n        ings:state.burgerBuilder.ingredients,\r\n        purchased:state.order.purchased\r\n     }\r\n }\r\n\r\n \r\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}