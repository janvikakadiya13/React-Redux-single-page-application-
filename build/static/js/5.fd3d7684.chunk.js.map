{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ig","style","textTransform","display","margin","border","padding","key","className","Classes","Order","Number","parseFloat","price","toFixed","Orders","this","onFetchOrder","token","userId","orders","Spinner","loading","id","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,MAAQ,uB,kHCmCXC,EAjCH,SAACC,GACT,IAAMC,EAAc,GAEpB,IAAM,IAAIC,KAAkBF,EAAMC,YAC9BA,EAAYE,KACR,CACIC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAKtC,IAAMI,EAAmBL,EAAYM,KAAI,SAAAC,GACrC,OAAO,0BACHC,MAAO,CACHC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,OAEbC,IAAKP,EAAGJ,MAAOI,EAAGJ,KARf,KAQuBI,EAAGH,OAR1B,QAWX,OACI,yBAAKW,UAAWC,IAAQC,OACpB,2CAAiBZ,GACjB,qCAAU,oCAAUa,OAAOC,WAAYpB,EAAMqB,OAAQC,QAAS,GAApD,c,gCCtBhBC,E,kLAGFC,KAAKxB,MAAMyB,aAAaD,KAAKxB,MAAM0B,MAAMF,KAAKxB,MAAM2B,U,+BAIhD,IAAIC,EAAO,kBAACC,EAAA,EAAD,MAUX,OATIL,KAAKxB,MAAM8B,UACXF,EAASJ,KAAKxB,MAAM4B,OAAOrB,KAAI,SAAAR,GACf,OAAO,kBAACmB,EAAD,CAAOH,IAAKhB,EAAMgC,GACb9B,YAAaF,EAAME,YACnBoB,MAAOtB,EAAMsB,YAMzC,6BACKO,O,GAnBII,aAyCNC,uBAhBO,SAAAC,GAClB,MAAO,CACHN,OAAOM,EAAMnC,MAAM6B,OACnBE,QAAQI,EAAMnC,MAAM+B,QACpBJ,MAAMQ,EAAMC,KAAKT,MACjBC,OAAOO,EAAMC,KAAKR,WAID,SAAAS,GACrB,MAAO,CACHX,aAAe,SAACC,EAAMC,GAAP,OAAiBS,EAASC,IAAoBX,EAAMC,QAK5DM,CAA4CK,YAAiBf,EAAOgB","file":"static/js/5.fd3d7684.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__ONkZd\"};","import React from 'react';\r\nimport Classes from './Order.module.css';\r\n\r\nconst order=(props)=>{\r\n    const ingredients = [];\r\n\r\n    for ( let ingredientName in props.ingredients ) {\r\n        ingredients.push(\r\n            {\r\n                name: ingredientName,\r\n                amount: props.ingredients[ingredientName]\r\n            }\r\n        );\r\n    }\r\n\r\n    const ingredientOutput = ingredients.map(ig => {\r\n        return <span \r\n            style={{\r\n                textTransform: 'capitalize',\r\n                display: 'inline-block',\r\n                margin: '0 8px',\r\n                border: '1px solid #ccc',\r\n                padding: '5px'\r\n                }}\r\n            key={ig.name}>{ig.name} ({ig.amount})</span>;\r\n    });\r\n\r\n    return (\r\n        <div className={Classes.Order}>\r\n            <p>Ingredients: {ingredientOutput}</p>\r\n            <p>Price: <strong> {Number.parseFloat( props.price ).toFixed( 2 )} RUPEES</strong></p>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default order;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Order from '../../components/Order/Order';\r\nimport axios from '../../axios-order';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\n\r\nclass Orders extends Component{\r\n     \r\n    componentDidMount(){\r\n    this.props.onFetchOrder(this.props.token,this.props.userId);\r\n    }\r\n\r\n    render(){\r\n        let orders=<Spinner/>\r\n        if(!this.props.loading){\r\n            orders=  this.props.orders.map(order =>{\r\n                            return <Order key={order.id} \r\n                                        ingredients={order.ingredients}\r\n                                        price={order.price}\r\n                            />\r\n                        })\r\n                  \r\n        }\r\n        return( \r\n            <div>\r\n                {orders}\r\n            </div>  \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps=state=>{\r\n    return {\r\n        orders:state.order.orders,\r\n        loading:state.order.loading,\r\n        token:state.auth.token,\r\n        userId:state.auth.userId\r\n     }\r\n }\r\n\r\nconst mapDispatchToProps=dispatch=>{\r\n    return {\r\n        onFetchOrder : (token,userId)=> dispatch(actions.fetchOrders(token,userId))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(Orders,axios));"],"sourceRoot":""}